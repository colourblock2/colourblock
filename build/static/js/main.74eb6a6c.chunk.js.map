{"version":3,"sources":["IconexConnect.js","SDK.js","App.js","serviceWorker.js","index.js"],"names":["IconexConnect","getAddress","Promise","resolve","window","addEventListener","eventHandler","event","_event$detail","detail","type","payload","removeEventListener","dispatchEvent","CustomEvent","sendTransaction","params","_event$detail2","result","provider","HttpProvider","PROVIDER_URL","iconService","IconService","CallBuilder","IconBuilder","CallTransactionBuilder","SDK","callBuild","_ref","arguments","length","undefined","from","methodName","to","_ref$params","method","build","sendTxBuild","_ref2","_ref2$params","_ref2$networkId","networkId","NID","_ref2$stepLimit","stepLimit","_ref2$value","value","jsonrpc","nid","timestamp","concat","Date","getTime","toString","version","id","LABEL","0","1","2","3","4","5","6","7","8","9","10","11","12","COLOR","App","state","colour","isLoggedIn","address","handleChange","e","_this","setState","target","handleLogIn","_callee","myAddress","regenerator_default","a","wrap","_context","prev","next","sent","call","CONTRACT_ADDRESS","execute","console","log","Number","stop","handleSubmit","_callee2","_this$state","txObj","_context2","code","IconConverter","toHex","alert","_this$state2","this","react_default","createElement","className","style","background","Fragment","onChange","defaultValue","marginLeft","marginBottom","marginRight","height","name","Object","values","map","val","i","key","onClick","position","fontSize","width","margin","bottom","href","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74eb6a6c.chunk.js","sourcesContent":["const getAddress = () => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_ADDRESS') {\n        resolve(payload);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_ADDRESS',\n      },\n    }));\n  });\n  \n  \n  const sendTransaction = params => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_JSON-RPC') {\n        resolve(payload.result);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_JSON-RPC',\n        payload: params,\n      },\n    }));\n  });\n  \n  export default {\n    getAddress,\n    sendTransaction,\n  };","import IconService, {\n    HttpProvider,\n    IconBuilder,\n  } from 'icon-sdk-js'\n  import config from './config'\n  \n  const provider = new HttpProvider(window.PROVIDER_URL)\n  const iconService = new IconService(provider)\n  \n  const {\n    CallBuilder,\n    CallTransactionBuilder,\n  } = IconBuilder;\n  \n  const callBuild = ({\n    from,\n    methodName,\n    to,\n    params = {},\n  } = {}) => {\n    const callBuilder = new CallBuilder();\n    const obj = callBuilder\n      .from(from)\n      .to(to)\n      .method(methodName)\n      .params(params)\n      .build();\n    return obj;\n  };\n  \n  const sendTxBuild = ({\n    from,\n    to,\n    methodName,\n    params = {},\n    networkId = window.NID,\n    stepLimit = '0x493e0',\n    value = '0x0',\n  } = {}) => {\n    const callTransactionBuilder = new CallTransactionBuilder();\n    const obj = callTransactionBuilder\n      .nid(networkId)\n      .from(from)\n      .to(to)\n      .stepLimit(stepLimit)\n      .value(value)\n      .timestamp(`0x${((new Date()).getTime() * 1000).toString(16)}`)\n      .method(methodName)\n      .params(params)\n      .version('0x3')\n      .build();\n  \n    return {\n      jsonrpc: '2.0',\n      method: 'icx_sendTransaction',\n      params: obj,\n      id: 1,\n    };\n  };\n  \n  export default {\n    iconService,\n    callBuild,\n    sendTxBuild,\n  }","import React, { Component } from 'react'\nimport IconexConnect from './IconexConnect';\nimport {\n  IconConverter\n} from 'icon-sdk-js'\nimport SDK from './SDK';\nimport config from './config';\nimport './App.css';\n\nconst LABEL = {\n  0: 'WHITE',\n  1: 'RED',\n  2: 'ORANGE',\n  3: 'YELLOW',\n  4: 'LIME GREEN',\n  5: 'KELLY GREEN',\n  6: 'SKY BLUE',\n  7: 'ROYAL BLUE',\n  8: 'VIOLET',\n  9: 'PINK',\n  10: 'BROWN',\n  11: 'GRAY',\n  12: 'BLACK'\n}\n\nconst COLOR = {\n  0: '#f1f1f1',\n  1: '#ff5349',\n  2: '#ff6600',\n  3: '#fff222',\n  4: '#32cd32',\n  5: '#01a263',\n  6: '#00ccff',\n  7: '#4169e1',\n  8: '#9400d3',\n  9: '#ff78cb',\n  10: '#654321',\n  11: '#c2c5cc',\n  12: '#333333'\n}\n\nexport default class App extends Component {\n  state = {\n    colour: 0,\n    isLoggedIn: false,\n    address: '',\n  }\n  \n  handleChange = (e) => {\n    this.setState({\n      colour: e.target.value\n    })\n  }\n\n  handleLogIn = async (e) => {\n    const myAddress = await IconexConnect.getAddress()\n    const colour = await SDK.iconService.call(\n      SDK.callBuild({\n        methodName: 'get_mood_code',\n        params: {\n          address: myAddress\n        },\n        to: window.CONTRACT_ADDRESS,\n      })\n    ).execute()\n    console.log(colour)\n    this.setState({\n      myAddress,\n      isLoggedIn: true,\n      colour: Number(colour) || 0\n    })\n  }\n\n  handleSubmit = async () => {\n    const { sendTxBuild } = SDK\n    const { colour, myAddress } = this.state\n    const txObj = sendTxBuild({\n      from: myAddress,\n      to: window.CONTRACT_ADDRESS,\n      methodName: 'set_mood_code',\n      params: {\n        code: IconConverter.toHex(Number(colour)), \n      },\n    })\n    // const txObj = sendTxBuild({\n    //   from: myAddress,\n    //   to: window.CONTRACT_ADDRESS,\n    //   methodName: 'add_movie',\n    //   params: {\n    //     idx: IconConverter.toHex(id),\n    //   },\n    // })\n    const tx = await IconexConnect.sendTransaction(txObj)\n    alert('오늘의 색깔이 등록되었습니다.')\n  }\n\n  render() {\n    const { colour, isLoggedIn } = this.state\n    return (\n      <div className=\"App\" style={{background: COLOR[colour]}}>\n        <div className=\"logo\">\n          colourBlock\n          {\n            isLoggedIn ? (\n              <>\n                <select onChange={this.handleChange} defaultValue={0} style={{ marginLeft: 20, marginBottom: 20, marginRight: 10, height: '22px'}} name=\"colour\">\n                    {\n                      Object.values(LABEL).map((val, i) => {\n                        return <option key={i} value={i}>{val}</option>\n                      })\n                    }\n                  </select>\n                <button onClick={this.handleSubmit}>등록</button>\n              </>\n            ) : (\n              <button style={{ marginLeft: 20 }} onClick={this.handleLogIn}>로그인</button>\n            )\n          }\n        </div>\n        <div className=\"App-header\">\n          { LABEL[colour] }\n        </div>\n        <div style={{position: 'fixed', fontSize: 9, width: '100vw', margin: '0 auto', bottom: 30}}>inspired by <a href=\"https://graf1x.com/color-psychology-emotion-meaning-poster/\">https://graf1x.com/color-psychology-emotion-meaning-poster/</a></div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}